{"version":3,"file":"just-web-react.js","sources":["../ts/AppContext.tsx","../ts/lazyImport.ts","../ts/useStore.ts","../ts/storeContext.tsx"],"sourcesContent":["import { LogContext } from '@just-web/log'\nimport { AppBaseContext } from '@just-web/types'\nimport { createContext, useContext } from 'react'\n\n/**\n * AppContext provider.\n * It injects the application to the DOM scope to share accross plugins and components.\n *\n * If your app is a MFE (micro-app) or using plugin that works in MFE,\n * you need to add this to the root of your application DOM so that the plugin can access to the app and features.\n *\n * While in non-MFE application you can rely on global scope or module scope to share state/app,\n * it is recommend to use this so that you can use any plugin that relies on `AppContext` as needed.\n */\nexport const AppContext = createContext<AppBaseContext & LogContext>(undefined as any)\n\n/**\n * Use the app from `AppContext`.\n *\n * It returns the app instance stored in the DOM scope from `AppContext.Provider`.\n * @type C The app Context you are interested in.\n * This type allow you to specify the context type you are interested in.\n *\n * The consuming code is usually a component in a plugin.\n * You should specify only the type you need as in ISP.\n *\n * It does not perform additional check so it is possible that you get `undefined` error,\n * If the app did not load the plugin you need.\n */\nexport function useAppContext<C extends Record<string | symbol, any> = AppBaseContext & LogContext>(): C & AppBaseContext & LogContext {\n  const app = useContext(AppContext) as unknown as C & AppBaseContext & LogContext\n  if (!app) {\n    throw new Error('AppContext.Provider must be used before using useAppContext()')\n  }\n  return app\n}\n","import type { PluginModule } from '@just-web/types'\nimport { ComponentType, lazy } from 'react'\n\nexport function lazyImport<\n  M extends { default: (...args: any[]) => PluginModule<any> },\n  K extends keyof M,\n  R extends { start(): Promise<void> }\n>(\n  importPlugin: Promise<M>,\n  key: K,\n  extendPlugin: (plugin: M['default']) => R\n): M[K] extends ComponentType<any> ? {\n  [k in K]: React.LazyExoticComponent<M[K]>\n} & {\n  getExtendingApp: () => Promise<R>\n} : never {\n  let cached: Promise<readonly [M, R]> | undefined\n  function cachedExtendingApp() {\n    return cached ? cached : cached = extendingApp()\n  }\n  async function extendingApp() {\n    const m = await importPlugin\n    const extendedApp = extendPlugin(m.default)\n    await extendedApp.start()\n    return [m, extendedApp] as const\n  }\n\n  const Component = lazy(async () => {\n    const [m] = await cachedExtendingApp()\n    return { default: m[key] as any }\n  })\n\n  return {\n    [key]: Component,\n    getExtendingApp: () => cachedExtendingApp().then(([, extendedApp]) => extendedApp)\n  } as any\n}\n","import { createStore, Store } from '@just-web/states'\nimport { Updater } from '@just-web/states'\nimport { useCallback, useEffect, useState } from 'react'\nimport { isType } from 'type-plus'\n\n/**\n * Use a value in the store for `useState()`.\n * @param getState a function to get the value to be used in `useState()`.\n * @param updateStore optional function to update the store value when the state changes\n */\nexport function useStore<S extends Record<any, any>, V>(\n  store: Store<S>,\n  getState: (s: S) => V,\n  updateStore?: (draft: S, value: V) => ReturnType<Updater<S>>\n): [value: V, setValue: (value: V | ((value: V) => V)) => void] {\n  const [value, setValue] = useState(() => getState(store.get()))\n\n  useEffect(() => store.onChange((s) => setValue(getState(s))), [])\n\n  const s = createStore<{ a: number }>({ a: 1 })\n  s.set((d) => {\n    d.a += 1\n  })\n  return [\n    value,\n    useCallback((updater) => {\n      if (updateStore) {\n        store.set((s) =>\n          updateStore(\n            s,\n            isType<(value: V) => V>(updater, (u) => typeof u === 'function')\n              ? updater(getState(s))\n              : updater\n          )\n        )\n\n        return setValue(getState(store.get()))\n      }\n      return setValue(updater)\n    }, [])\n  ]\n}\n","import type { Store, Updater } from '@just-web/states'\nimport { Context, createContext, useContext } from 'react'\nimport { useStore } from './useStore.js'\n\n/**\n * Creates a `Store<T>`context to be used in `useStoreContext()`\n * @type T Type of the store value.\n */\nexport function createStoreContext<T extends Record<any, any>>() {\n  return createContext<Store<T>>(undefined as any)\n}\n\n/**\n * Uses a store context.\n * @param reactContext The context created from `createStoreContext()`.\n * @param getState The function to get a particular value from the store.\n * @param updateStore Optional. The function to update the store when the returning `setValue()` is called.\n */\nexport function useStoreContext<S extends Record<any, any>, V>(\n  reactContext: Context<Store<S>>,\n  getState: (s: S) => V,\n  updateStore?: (draft: S, value: V) => ReturnType<Updater<S>>\n): [value: V, setValue: (value: V | ((value: V) => V)) => void] {\n  const store = useContext(reactContext)\n  if (!store) {\n    throw new Error('Context.Provider must be used before using useStoreContext()')\n  }\n  return useStore(store, getState, updateStore)\n}\n"],"names":["AppContext","createContext","undefined","useAppContext","app","useContext","Error","s","createStoreContext","useStoreContext","reactContext","getState","updateStore","store","useStore"],"mappings":";;;AAcaA,MAAAA,aAAaC,cAA2CC,MAAiB;AAe/E,SAASC,gBAAuH;AAC/HC,QAAAA,MAAMC,WAAWL,UAAU;AACjC,MAAI,CAACI,KAAK;AACF,UAAA,IAAIE,MAAM,+DAA+D;AAAA,EACjF;AACOF,SAAAA;AACT;AChCgB,SAAA,WAKd,cACA,KACA,cAKQ;AACJ,MAAA;AACJ,WAAS,qBAAqB;AACrB,WAAA,SAAS,SAAS,SAAS,aAAa;AAAA,EACjD;AACA,iBAAe,eAAe;AAC5B,UAAM,IAAI,MAAM;AACV,UAAA,cAAc,aAAa,EAAE,OAAO;AAC1C,UAAM,YAAY;AACX,WAAA,CAAC,GAAG,WAAW;AAAA,EACxB;AAEM,QAAA,YAAY,KAAK,YAAY;AACjC,UAAM,CAAC,CAAC,IAAI,MAAM;AACX,WAAA,EAAE,SAAS,EAAE,KAAY;AAAA,EAAA,CACjC;AAEM,SAAA;AAAA,IACL,CAAC,MAAM;AAAA,IACP,iBAAiB,MAAM,qBAAqB,KAAK,CAAC,CAAG,EAAA,WAAW,MAAM,WAAW;AAAA,EAAA;AAErF;AC1BgB,SAAA,SACd,OACA,UACA,aAC8D;AACxD,QAAA,CAAC,OAAO,QAAQ,IAAI,SAAS,MAAM,SAAS,MAAM,IAAK,CAAA,CAAC;AAE9D,YAAU,MAAM,MAAM,SAAS,CAACG,OAAM,SAAS,SAASA,EAAC,CAAC,CAAC,GAAG,CAAE,CAAA;AAEhE,QAAM,IAAI,YAA2B,EAAE,GAAG,EAAG,CAAA;AAC3C,IAAA,IAAI,CAAC,MAAM;AACX,MAAE,KAAK;AAAA,EAAA,CACR;AACM,SAAA;AAAA,IACL;AAAA,IACA,YAAY,CAAC,YAAY;AACvB,UAAI,aAAa;AACT,cAAA;AAAA,UAAI,CAACA,OACT;AAAA,YACEA;AAAAA,YACA,OAAwB,SAAS,CAAC,MAAM,OAAO,MAAM,UAAU,IAC3D,QAAQ,SAASA,EAAC,CAAC,IACnB;AAAA,UACN;AAAA,QAAA;AAGF,eAAO,SAAS,SAAS,MAAM,IAAA,CAAK,CAAC;AAAA,MACvC;AACA,aAAO,SAAS,OAAO;AAAA,IACzB,GAAG,EAAE;AAAA,EAAA;AAET;ACjCO,SAASC,qBAAiD;AAC/D,SAAOP,cAAwBC,MAAiB;AAClD;AAQgBO,SAAAA,gBACdC,cACAC,UACAC,aAC8D;AACxDC,QAAAA,QAAQR,WAAWK,YAAY;AACrC,MAAI,CAACG,OAAO;AACJ,UAAA,IAAIP,MAAM,8DAA8D;AAAA,EAChF;AACOQ,SAAAA,SAASD,OAAOF,UAAUC,WAAW;AAC9C;"}